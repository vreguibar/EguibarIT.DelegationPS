#https://scriptingchris.tech/2021/05/16/how-to-setup-a-github-actions-pipeline-for-publishing-your-powershell-module/

name: Build Module

# Controls when the workflow will run
on:
  pull_request: # Only trigger the workflow if there is a pull request to the main branch
    branches: [ main ]

  workflow_dispatch: # Enables the possibility to trigger the workflow manually

  push:
      tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  # 1st Job -- Building the module
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
     # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
        # Checkout the main branch
      - uses: actions/checkout@main

        # Setting up required powershell modules
      - name: Set required PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: Pester, PSScriptAnalyzer, InvokeBuild, platyPS

        # Setting up the powershell module cache
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
            path: ${{ steps.psmodulecache.outputs.modulepath }}
            key: ${{ steps.psmodulecache.outputs.keygen }}

        # Installing the required powershell module, if not cached
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop

        # Running the InvokeBuild Module Invoke-Build command with "Release configuration"
      - name: Invoke Build
        shell: pwsh
        run: pwsh -command "Invoke-Build -File ./Build/build.ps1 -Configuration 'Release' -ExportAlias"

        # Pushing the changes from InvokeBuild to the main branch
      - name: Push changes to Git Repository
        run: |
          git config --global user.name 'vreguibar'
          git config --global user.email 'vicente@eguibarIT.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add .
          git commit -am "Pushing Artifacts"
          git push

        # Uploads the build powershell module as an artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: module-artifact # Naming the powershell module artifact
          path: ./Output/ # Saving the powershell module artifact to the path ./Output/

  # 2nd Job -- Releasing the module
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
        # Check out the main branch
      - uses: actions/checkout@master

      - name: Get tag
        id: tag
        shell: pwsh
        run: |
            # $ModuleName = (Get-ChildItem -Path .\Output).Name
            # $PS_Module_Version = ('v{0}' -f (Test-ModuleManifest -Path ".\$($ModuleName).psd1").Version)
            $PS_Module_Version = ('v{0}' -f (Test-ModuleManifest -Path ".\EguibarIT.psd1").Version)
            write-host $PS_Module_Version
            echo "::set-output name=MODULE_VERSION::$PS_Module_Version"
            echo "MODULE_VERSION=$PS_Module_Version"  >> $Env:GITHUB_ENV


      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.MODULE_VERSION }}
          release_name: Release ${{ env.MODULE_VERSION }}
          draft: false
          prerelease: false

       # Check out the main branch
      - uses: actions/checkout@main

        # Downloads the powershell module build artifact made in the build step
      - name: Download build artifact
        uses: aochmann/actions-download-artifact@1.0.4
        with:
          repo: ${{github.repository}}
          name: module-artifact # Name of the powershell module artifact
          path: Artifact/ # Downloads the module to the path ./Artifact/

        # Running a powershell command to save the module name as an Environment Variable
      - name: Get Module Name
        run: |
          Write-Host $Env:GITHUB_REF
          $ModuleName = (Get-ChildItem -Path ./Output/).Name
          echo "MODULE_NAME=$ModuleName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh

        # Publishing the module to powershell gallery
      - name: Publish to Powershell Gallery
        # You may pin to the exact commit or the version.
        # uses: pcgeek86/publish-powershell-module-action@2a7837ce0746ea58c40574d8d6cbc6c44238edb7
        uses: pcgeek86/publish-powershell-module-action@v20
        with:
          modulePath: ./Output/${{ env.MODULE_NAME }} # Using the environment variable to find the module name
          NuGetApiKey: ${{ secrets.PS_GALLERY_KEY }} # Using the NugetAPI key set in GitHub Secrets
